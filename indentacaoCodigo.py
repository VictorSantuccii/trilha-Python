# üêç GUIA DE IDENTA√á√ÉO EM PYTHON üêç
# --------------------------------------
# Python usa indenta√ß√£o para definir blocos de c√≥digo.
# Recomendado: 4 espa√ßos por n√≠vel de indenta√ß√£o (PEP 8).
# N√ÉO use tabula√ß√£o misturada com espa√ßos.
# --------------------------------------

# ‚úÖ CONDICIONAIS: if, elif, else



idade = 20

if idade >= 18:
    print("Voc√™ √© maior de idade")  # Esse print est√° dentro do 'if'
else:
    print("Voc√™ √© menor de idade")  # Esse print est√° dentro do 'else'






# ‚úÖ LA√áOS DE REPETI√á√ÉO: for, while
for i in range(3):
    print("La√ßo for, n√∫mero:", i)  # Est√° dentro do 'for'

contador = 0
while contador < 3:
    print("La√ßo while, contador:", contador)  # Est√° dentro do 'while'
    contador += 1






# ‚úÖ FUN√á√ïES: def
def saudacao(nome):
    # Tudo dentro da fun√ß√£o deve ser indentado
    print(f"Ol√°, {nome}!")  # Est√° dentro da fun√ß√£o

saudacao("Sant")






# ‚úÖ CLASSES
class Pessoa:
    def __init__(self, nome):
        # self.nome √© um atributo da inst√¢ncia
        self.nome = nome

    def dizer_ola(self):
        # Esse m√©todo pertence √† classe
        print(f"Ol√°! Meu nome √© {self.nome}")

p = Pessoa("Victor")
p.dizer_ola()






# ‚úÖ ESTRUTURAS COMBINADAS: if dentro de for
for numero in range(5):
    if numero % 2 == 0:
        print(f"{numero} √© par")
    else:
        print(f"{numero} √© √≠mpar")





# ‚úÖ BLOCO VAZIO: usar 'pass'
# Se voc√™ quiser deixar um bloco em branco por enquanto, use 'pass'
def futura_funcao():
    pass  # Isso evita erro de indenta√ß√£o at√© que voc√™ escreva o c√≥digo depois

# ‚ùå ERRO COMUM: falta de indenta√ß√£o
# if True:
# print("Isso vai dar erro")  # ERRO! Est√° fora do bloco





# ‚úÖ CORRETO:
if True:
    print("Isso est√° corretamente indentado")

# ‚úÖ BOA PR√ÅTICA: m√∫ltiplos n√≠veis de indenta√ß√£o
def exemplo_aninhado(x):
    if x > 0:
        for i in range(x):
            print(f"Valor: {i}")  # 3 n√≠veis: fun√ß√£o > if > for
    else:
        print("Valor inv√°lido")

exemplo_aninhado(3)






# ‚úÖ DICA FINAL:
# Use editores como VS Code ou PyCharm com indenta√ß√£o autom√°tica
# e extens√µes como 'Black' para formatar seu c√≥digo com padr√£o profissional.

# ‚ö†Ô∏è Tabula√ß√£o vs Espa√ßos em Python

# No Python, a indenta√ß√£o pode ser feita com tabula√ß√£o ou com espa√ßos ‚Äî 
# mas N√ÉO PODE misturar os dois no mesmo bloco. Isso gera erro de sintaxe.
