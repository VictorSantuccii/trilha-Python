# ðŸ“š MÃ‰TODOS DE LISTAS EM PYTHON

# Lista de exemplo
frutas = ['maÃ§Ã£', 'banana', 'laranja']


# âœ… .append() â†’ adiciona um item no final da lista
frutas.append('uva')  # ['maÃ§Ã£', 'banana', 'laranja', 'uva']


# âœ… .insert() â†’ insere um item em uma posiÃ§Ã£o especÃ­fica
frutas.insert(1, 'morango')  # ['maÃ§Ã£', 'morango', 'banana', 'laranja', 'uva']


# âœ… .extend() â†’ adiciona vÃ¡rios itens (concatena listas)
frutas.extend(['kiwi', 'melancia'])  # ['maÃ§Ã£', ..., 'melancia']


# âœ… .remove() â†’ remove a primeira ocorrÃªncia do valor
frutas.remove('banana')  # Remove sÃ³ a primeira 'banana' que encontrar


# âœ… .pop() â†’ remove e retorna o Ãºltimo item (ou Ã­ndice especÃ­fico)
ultimo = frutas.pop()       # Remove 'melancia'
segundo = frutas.pop(1)     # Remove o item da posiÃ§Ã£o 1


# âœ… .clear() â†’ limpa todos os elementos da lista
# frutas.clear()  # Agora frutas = []


# âœ… .index() â†’ retorna o Ã­ndice do primeiro item com valor especificado
indice = frutas.index('laranja')  # Ex: retorna 2


# âœ… .count() â†’ conta quantas vezes um valor aparece na lista
contagem = frutas.count('maÃ§Ã£')  # Ex: 1


# âœ… .sort() â†’ ordena a lista **em ordem crescente** (altera a original)
numeros = [3, 1, 4, 2]
numeros.sort()  # [1, 2, 3, 4]


# âœ… .sort(reverse=True) â†’ ordena em ordem decrescente
numeros.sort(reverse=True)  # [4, 3, 2, 1]


# âœ… .reverse() â†’ inverte a ordem dos elementos (sem ordenar)
frutas.reverse()  # Inverte a lista atual


# âœ… .copy() â†’ cria uma cÃ³pia da lista
frutas_copia = frutas.copy()


# âœ… len(lista) â†’ retorna o tamanho da lista
tamanho = len(frutas)


# âœ… in â†’ verifica se um item existe na lista
existe = 'uva' in frutas  # True ou False


# âœ… del lista[i] â†’ remove o item pelo Ã­ndice
del frutas[0]  # Remove o item na posiÃ§Ã£o 0


# âœ… slicing (fatiamento)
sublista = frutas[1:3]  # Pega os itens do Ã­ndice 1 atÃ© 2

# ----------------------------------------------------------------

# Lista de exemplo
letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g']


# âœ… lista[inÃ­cio:fim] â†’ pega do Ã­ndice inÃ­cio atÃ© fim - 1
print(letras[0:3])   # ['a', 'b', 'c']


# âœ… lista[:fim] â†’ do inÃ­cio atÃ© fim - 1
print(letras[:4])    # ['a', 'b', 'c', 'd']


# âœ… lista[inÃ­cio:] â†’ do Ã­ndice atÃ© o fim
print(letras[3:])    # ['d', 'e', 'f', 'g']


# âœ… lista[:] â†’ cÃ³pia completa da lista
print(letras[:])     # ['a', 'b', 'c', 'd', 'e', 'f', 'g']


# âœ… lista[inÃ­cio:fim:passo] â†’ fatiamento com passo indo de dois em dois ( 2 )
print(letras[1:6:2]) # ['b', 'd', 'f']


# âœ… passo negativo â†’ inverte a lista
print(letras[::-1])  # ['g', 'f', 'e', 'd', 'c', 'b', 'a']


# âœ… Ã­ndices negativos â†’ contam de trÃ¡s para frente
print(letras[-3:])   # ['e', 'f', 'g']
print(letras[:-2])   # ['a', 'b', 'c', 'd', 'e']


# âœ… usando slice() (opcional, mesmo efeito)
fatia = slice(2, 5)
print(letras[fatia])  # ['c', 'd', 'e']

